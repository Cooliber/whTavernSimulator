[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "warhammer-tavern-simulator-enhanced"
version = "1.0.0"
description = "Enhanced Warhammer Fantasy Tavern Simulator with GSAP animations, CrewAI multi-agent system, and comprehensive UI/UX"
readme = "ENHANCED_UI_README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Augment Code", email = "augment@example.com"},
]
keywords = [
    "warhammer",
    "tavern",
    "simulator", 
    "gsap",
    "crewai",
    "streamlit",
    "fantasy",
    "rpg",
    "ui",
    "ux"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",

    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment :: Role-Playing",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Graphics :: Presentation",
]
requires-python = ">=3.10"
dependencies = [
    # Core web framework
    "streamlit>=1.28.0",
    
    # CrewAI framework for multi-agent system
    "crewai>=0.28.0",
    
    # Environment management
    "python-dotenv>=1.0.0",
    
    # LLM integrations
    "openai>=1.0.0",
    "litellm>=1.0.0",
    
    # Data processing and visualization
    "pandas>=2.0.0",
    "numpy>=1.21.0",
    "matplotlib>=3.5.0",
    "networkx>=2.6.0",
    
    # HTTP requests and API handling
    "requests>=2.28.0",
    "httpx>=0.24.0",
    
    # Data validation and serialization
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    
    # Retry mechanisms and error handling
    "tenacity>=8.0.0",
    
    # JSON and data handling
    "ujson>=5.0.0",
    
    # Production monitoring and logging
    "structlog>=22.0.0",
    "prometheus-client>=0.15.0",
    
    # Container health checks
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
viz = [
    "plotly>=5.0.0",
    "dash>=2.0.0",
]
full = [
    "warhammer-tavern-simulator-enhanced[dev,viz]",
]

[project.urls]
Homepage = "https://github.com/augment-code/warhammer-tavern-simulator"
Documentation = "https://github.com/augment-code/warhammer-tavern-simulator/blob/main/ENHANCED_UI_README.md"
Repository = "https://github.com/augment-code/warhammer-tavern-simulator.git"
Issues = "https://github.com/augment-code/warhammer-tavern-simulator/issues"

[project.scripts]
tavern-simulator = "app_enhanced_ui:main"
tavern-test = "test_complete_integration:main"
tavern-deploy = "deploy_production:main"

[tool.hatch.build.targets.wheel]
packages = ["components", "services", "utils"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
    ".",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["components", "services", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
